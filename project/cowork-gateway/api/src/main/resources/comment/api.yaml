# API Template to extend when a service is created based on this archetype.
# Do not create a new .yml file next to this, rather use this as the main descriptor.

openapi: "3.0.3"
info:
  version: 1.0.0
  title: Microservice

servers:
  - url: http://localhost:8080

paths:

  # ==============================================================================
  # Comment
  # ==============================================================================

  /api/comment/v1/comments/{id}:
    get:
      tags:
        - comment
      operationId: getComment
      description: Gets an existing comment
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the account
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: get back a single comment view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
              
  /api/comment/v1/comments:
    post:
      tags:
        - comment
      operationId: createComment
      description: Add comment
      requestBody:
        description: Content of the comment
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        201:
          description: The created comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
                
    put:
      tags:
        - comment
      operationId: updateComment
      description: Updates an existing comment
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the comment
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        200:
          description: The updated comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'

  /api/comment/v1/comments/search:
    post:
      tags:
        - comment
      operationId: searchComment
      description: Lists comments in a pageable way
      requestBody:
        description: CommentDto that contains page information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageDto'
      responses:
        200:
          description: PageResultDto that contains the page data and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResultDto'

components:
  schemas:

    # ==============================================================================
    # Enums
    # ==============================================================================

    # ==============================================================================
    # Dtos
    # ==============================================================================

    CommentDto:
      required:
        - userId
        - value
      properties:
        id:
          type: integer
          format: int64
          description: The technical id.
        userId:
          type: integer
          format: int64
        text:
          type: string
          minLength: 1
          maxLength: 1000

    FilterConditionDto:
      properties:
        type:
          type: string
        filter:
          type: string
        filterTo:
          type: integer
          format: int32

    PageFilterDto:
      properties:
        field:
          type: string
        filterType:
          type: string
        type:
          type: string
        filter:
          type: string
        filterTo:
          type: integer
          format: int32
        operator:
          type: string
        condition1:
          $ref: '#/components/schemas/FilterConditionDto'
        condition2:
          $ref: '#/components/schemas/FilterConditionDto'

    PageSortDto:
      properties:
        colId:
          type: string
        sort:
          type: string

    SortDto:
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean

    PageDto:
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        sorts:
          type: array
          items:
            $ref: '#/components/schemas/PageSortDto'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/PageFilterDto'

    PageResultDto:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
        last:
          type: boolean
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortDto'
        first:
          type: boolean

    ErrorDto:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string