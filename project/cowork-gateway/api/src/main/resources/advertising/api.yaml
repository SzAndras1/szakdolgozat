# API Template to extend when a service is created based on this archetype.
# Do not create a new .yml file next to this, rather use this as the main descriptor.

openapi: "3.0.3"
info:
  version: 1.0.0
  title: Microservice

servers:
  - url: http://advertising-service:8081

paths:

  # ==============================================================================
  # Advertising
  # ==============================================================================

  /api/v1/advertisements/{id}:
    get:
      tags:
        - advertising
      operationId: getAd
      description: Get an existing Advertisement
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the Advertisement
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Get back a single Advertisement view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'
    delete:
      tags:
        - advertising
      operationId: deleteAdvertising
      description: Delete an existing Advertisement by its id
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the Advertisement
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The deleted Advertisement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/{userId}/ads:
    get:
      tags:
        - advertising
      operationId: getUserAds
      description: Get list of User's Advertisements
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the User
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Get every Advertisement that the specific has User posted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/favorites:
    get:
      tags:
        - advertising
      operationId: getFavoriteAds
      description: Get list of favorite Advertisements
      responses:
        200:
          description: Get every Advertisement that isFavorite data is true
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements:
    post:
      tags:
        - advertising
      operationId: createAd
      description: Add an Advertisement
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/AdvertisingDto'
        description: Content of the Advertisement
        required: true
      responses:
        201:
          description: The created Advertisement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      tags:
        - advertising
      operationId: updateAdvertising
      description: Update an existing Advertisement
      requestBody:
        description: An AdvertisingDto that will be used to update the corresponding Advertisement
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvertisingDto'
      responses:
        200:
          description: The updated Advertisement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/search:
    post:
      tags:
        - advertising
      operationId: searchAdvertising
      description: List Advertisements in a pageable way
      requestBody:
        description: AdvertisingDto that contain page information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageDto'
      responses:
        200:
          description: PageResultDto that contain the page data and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResultDto'

  /api/v1/advertisements/{id}/status:
    put:
      tags:
        - advertising
      operationId: setAdStatus
      description: Change specific Advertisement's status (if active then switch to deactive and viceversa)
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the Advertisement
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The updated Advertisement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/{id}/favorite:
    put:
      tags:
        - advertising
      operationId: setAdFavoriteStatus
      description: Change specific Advertisement's favorite status (if selected then switch to deselected and viceversa)
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the Advertisement
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The updated Advertisement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/history:
    get:
      tags:
        - advertising
      operationId: getHistory
      description: Get list of visited Advertisements
      responses:
        200:
          description: Get every Advertisement that the User has already visited
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdvertisingDto'

  /api/v1/advertisements/image:
    post:
      tags:
        - advertising
      operationId: uploadImage
      description: Upload an Image
      requestBody:
        description: Image
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - adId
                - images
              properties:
                adId:
                  type: string
                # TODO: restrict image mediatype to image/jpeg image/png image/bmp
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: Response which indicate success
          content:
            application/json:
              schema:
                type: string

  # ==============================================================================
  # Rating
  # ==============================================================================

  /api/v1/advertisements/ratings:
    post:
      tags:
        - rating
      operationId: createRating
      description: change a Rating in a specific Advertisement
      requestBody:
        description: RatingDto that contains UserId and Rating value
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingDto'
      responses:
        201:
          description: The created Rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDto'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      tags:
        - rating
      operationId: updateRating
      description: Updates an existing rating
      requestBody:
        description: A RatingDto that will be used to update the corresponding Rating
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingDto'
      responses:
        200:
          description: The updated Rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDto'

  /api/v1/advertisements/ratings/users/{userId}:
    get:
      tags:
        - rating
      operationId: getOverallRating
      description: Get specific User's overall Rating
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the User
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Get specific User's overall Rating
          content:
            application/json:
              schema:
                type: number
                format: float

  /api/v1/advertisements/ratings/{userId}/all:
    get:
      tags:
        - rating
      operationId: getAdRatings
      description: Get specific Advertisement's every Rating
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the Advertisement
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: All Ratings to the corresponding Advertisement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingDto'

  /api/v1/advertisements/ratings/delete/{id}:
    delete:
      tags:
        - rating
      operationId: deleteRating
      description: Delete an existing Rating by its id
      parameters:
        - name: id
          in: path
          required: true
          description: Id of the Rating
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The deleted Rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDto'

components:
  schemas:

    # ==============================================================================
    # Enums
    # ==============================================================================

    # ==============================================================================
    # Dtos
    # ==============================================================================

    AdvertisingDto:
      required:
        - userId
        - text
        - email
        - priority
        - address
      properties:
        id:
          type: integer
          format: int64
          description: The technical id.
        userId:
          type: integer
          format: int64
        text:
          type: string
          minLength: 1
          maxLength: 1000
        email:
          type: string
          minLength: 1
          maxLength: 30
        priority:
          type: integer
          format: int64
        address:
          type: string
          minLength: 3
          maxLength: 100
        isActive:
          type: boolean
          default: true
        isFavorite:
          type: boolean
          default: false
        category:
          type: array
          items:
            type: string

    RatingDto:
      required:
        - userId
        - ratingValue
      properties:
        id:
          type: integer
          format: int64
          description: The technical id.
        userId:
          type: integer
          format: int64
        ratingValue:
          type: number
          format: float
          maximum: 5.0
          minimum: 1.0

    FilterConditionDto:
      properties:
        type:
          type: string
        filter:
          type: string
        filterTo:
          type: integer
          format: int32

    PageFilterDto:
      properties:
        field:
          type: string
        filterType:
          type: string
        type:
          type: string
        filter:
          type: string
        filterTo:
          type: integer
          format: int32
        operator:
          type: string
        condition1:
          $ref: '#/components/schemas/FilterConditionDto'
        condition2:
          $ref: '#/components/schemas/FilterConditionDto'

    PageSortDto:
      properties:
        colId:
          type: string
        sort:
          type: string

    SortDto:
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean

    PageDto:
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        sorts:
          type: array
          items:
            $ref: '#/components/schemas/PageSortDto'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/PageFilterDto'

    PageResultDto:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdvertisingDto'
        last:
          type: boolean
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortDto'
        first:
          type: boolean

    ErrorDto:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string